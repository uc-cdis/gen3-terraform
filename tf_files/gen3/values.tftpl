global:
  aws:
    enabled: true
    account: ${account_id}
    hatchery_role: ${hatchery_service_account}

  dev: false
  externalSecrets:
    deploy: true
  postgres:
    dbCreate: false
    externalSecret: "${vpc_name}_aurora-master-password"
  environment: "${vpc_name}"
  hostname: "${hostname}"
  revproxyArn: "${revproxy_arn}"
  dictionaryUrl: "${dictionary_url}"
  portalApp: gitops
  publicDataSets: ${public_datasets}
  tierAccessLevel: "${tier_access_level}"
  tierAccessLimit: ${tier_access_limit}
  netPolicy: ${netpolicy_enabled}
  dispatcherJobNum: "${dispatcher_job_number}"
  frontendRoot: "${frontend_root}"
  ddEnabled: ${dd_enabled}

ambassador:
  enabled: ${ambassador_enabled}

arborist:
  enabled: ${arborist_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-arborist-creds"

argo-wrapper:
  enabled: ${argo_enabled}

audit:
  enabled: ${audit_enabled}
  serviceAccount:
    eks.amazonaws.com/role-arn: ${audit_service_account}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-audit-creds"    


aws-es-proxy:
  enabled: ${aws-es-proxy_enabled}
  esEndpoint: ${es_endpoint}
  externalSecrets:
    awsCreds: "${es_secret_name}"

dicom-server:
  enabled: ${dicom-server_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-dicom-server-creds"

dicom-viewer:
  enabled: ${dicom-viewer_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-dicom-viewer-creds"

fence:
  enabled: ${fence_enabled}
  serviceAccount:
    eks.amazonaws.com/role-arn: ${fence_service_account}
   
  externalSecrets:
    fenceJwtKeys: ""
    fenceConfig: ${fence_config_secret_name}
    fenceGoogleAppCredsSecret: ""
    fenceGoogleStorageCredsSecret: ""  
    createK8sJwtKeysSecret: true
    createK8sGoogleAppSecrets: true
    createK8sFenceConfigSecret: true
    dbcreds: "${vpc_name}_${namespace}-fence-creds"    


  USER_YAML: |
    ${user_yaml}

  usersync:
    usersync: ${usersync_enabled}
    schedule: "${usersync_schedule}"
    syncFromDbgap: ${dbgap_enabled}
    userYamlS3Path: "${useryaml_s3_path}"
    slack_webhook: "${slack_webhook}"
    slack_send_dbgap: ${slack_send_dbgap}

frontend-framework:
  enabled: ${gen3ff_enabled}
  image:
    repository: ${gen3ff_repo}
    tag: ${gen3ff_tag}

grafana:
  enabled: ${deploy_grafana}

guppy:
  enabled: ${guppy_enabled}

hatchery:
  enabled: ${hatchery_enabled}

  hatchery:
    sidecarContainer:
      cpu-limit: '0.1'
      memory-limit: 256Mi
      image: quay.io/cdis/ecs-ws-sidecar:master
      env:
        NAMESPACE: "{{ .Release.Namespace }}"
        HOSTNAME: "{{ .Values.global.hostname }}"
      args: []
      command:
      - "/bin/bash"
      - "./sidecar.sh"
      lifecycle-pre-stop:
      - su
      - "-c"
      - echo test
      - "-s"
      - "/bin/sh"
      - root
    containers:
      -
        target-port: 8888
        cpu-limit: '1.0'
        memory-limit: 2Gi
        name: "(Tutorials) Example Analysis Jupyter Lab Notebooks"
        image: quay.io/cdis/heal-notebooks:combined_tutorials__latest
        env:
          FRAME_ANCESTORS: https://{{ .Values.global.hostname }}
        args:
        - "--NotebookApp.base_url=/lw-workspace/proxy/"
        - "--NotebookApp.default_url=/lab"
        - "--NotebookApp.password=''"
        - "--NotebookApp.token=''"
        - "--NotebookApp.shutdown_no_activity_timeout=5400"
        - "--NotebookApp.quit_button=False"
        command:
        - start-notebook.sh
        path-rewrite: "/lw-workspace/proxy/"
        use-tls: 'false'
        ready-probe: "/lw-workspace/proxy/"
        lifecycle-post-start:
        - "/bin/sh"
        - "-c"
        - export IAM=`whoami`; rm -rf /home/$IAM/pd/dockerHome; rm -rf /home/$IAM/pd/lost+found;
          ln -s /data /home/$IAM/pd/; true
        user-uid: 1000
        fs-gid: 100
        user-volume-location: "/home/jovyan/pd"
        gen3-volume-location: "/home/jovyan/.gen3"


indexd:
  enabled: ${indexd_enabled}
  defaultPrefix: ${indexd_prefix}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-indexd-creds"


manifestservice:
  enabled: ${manifestservice_enabled}

metadata:
  enabled: ${metadata_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-metadata-creds"

peregrine:
  enabled: ${peregrine_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-sheepdg-creds"

pidgin:
  enabled: ${pidgin_enabled}

portal:
  enabled: ${portal_enabled}
  gitops:
    json: | 
      ${gitops_file}

requestor:
  enabled: ${requestor_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-requestor-creds"

revproxy:
  enabled: ${revproxy_enabled}

s3-mountpoint:
  enabled: ${deploy_s3_mountpoint}

sheepdog:
  enabled: ${sheepdog_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-sheepdog-creds"

ssjdispatcher:
  enabled: ${ssjdispatcher_enabled}

sower:
  enabled: ${sowed_enabled}

wts:
  enabled: ${wts_enabled}
  externalSecrets:
    dbcreds: "${vpc_name}_${namespace}-wts-creds"
